# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-23 10:04
from __future__ import unicode_literals

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import drf_chunked_upload.models
import geoposition.fields
import mptt.fields
import taggit.managers
from django.conf import settings
from django.db import migrations, models

from .. import managers
from .. import permissions
from ..models import SoftDeleteModelMixin, Photo
from ..fields import LanguageField


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Delete date')),
            ],
            options={
                'ordering': ('is_active', 'username', 'date_joined'),
            },
            bases=(permissions.UserPermissionMixin, SoftDeleteModelMixin, models.Model),
            managers=[
                ('objects', managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccessLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.IntegerField(choices=[(0, 'Viewed'), (1, 'Downloaded')], verbose_name='Action')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Addition date')),
            ],
            options={
                'verbose_name_plural': 'Access logs',
                'verbose_name': 'Access log',
                'ordering': ('-added_at',),
            },
            bases=(permissions.AccessLogPermissionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Title')),
                ('title_en', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('title_es', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('title_ca', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('description_en', models.TextField(null=True, verbose_name='Description')),
                ('description_es', models.TextField(null=True, verbose_name='Description')),
                ('description_ca', models.TextField(null=True, verbose_name='Description')),
                ('slug', models.SlugField(unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modification date')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Delete date')),
            ],
            options={
                'verbose_name_plural': 'Albums',
                'verbose_name': 'Album',
                'ordering': ('-modified_at',),
            },
            bases=(permissions.AlbumPermissionMixin, SoftDeleteModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Copyright',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modification date')),
                ('slug', models.SlugField(blank=True, default='', max_length=100)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
            ],
            options={
                'verbose_name_plural': 'Copyrights',
                'verbose_name': 'Copyright',
                'ordering': ('-modified_at', 'created_at', 'slug'),
            },
            bases=(permissions.RightPermissionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DAMTaxonomy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('name_en', models.CharField(max_length=100, null=True, verbose_name='name')),
                ('name_es', models.CharField(max_length=100, null=True, verbose_name='name')),
                ('name_ca', models.CharField(max_length=100, null=True, verbose_name='name')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('active', models.BooleanField(default=True, verbose_name='active')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='bima_core.DAMTaxonomy', verbose_name='parent')),
            ],
            options={
                'verbose_name_plural': 'Taxonomies',
                'verbose_name': 'Taxonomy',
                'ordering': ('slug',),
            },
            bases=(permissions.TaxonomyPermissionMixin, models.Model),
            managers=[
                ('tree', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modification date')),
                ('title', models.CharField(max_length=128)),
                ('title_en', models.CharField(max_length=128, null=True)),
                ('title_es', models.CharField(max_length=128, null=True)),
                ('title_ca', models.CharField(max_length=128, null=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('description_es', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('description_ca', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('status', models.IntegerField(choices=[(0, 'Private'), (1, 'Published')], default=0, verbose_name='Status')),
            ],
            options={
                'verbose_name_plural': 'Galleries',
                'verbose_name': 'Gallery',
                'ordering': ('-modified_at',),
            },
            bases=(permissions.GalleryPermissionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GalleryMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Addition date')),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_albums', to=settings.AUTH_USER_MODEL)),
                ('gallery', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='galleries_membership', to='bima_core.Gallery')),
            ],
            bases=(permissions.GalleryMembershipPermissionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(blank=True, default='', max_length=50, verbose_name='Identifier')),
                ('image', models.ImageField(blank=True, max_length=200, null=True, upload_to=Photo.image_path, verbose_name='Image')),
                ('title', models.CharField(max_length=128, verbose_name='Title')),
                ('title_en', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('title_es', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('title_ca', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('status', models.IntegerField(choices=[(0, 'Private'), (1, 'Published')], default=0, verbose_name='Status')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('description_es', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('description_ca', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('original_file_name', models.CharField(max_length=200, verbose_name='Original file name')),
                ('internal_comment', models.TextField(blank=True, default='', verbose_name='Internal comment')),
                ('original_platform', models.CharField(blank=True, default='', max_length=200)),
                ('categorize_date', models.DateField(blank=True, null=True, verbose_name='Categorize date')),
                ('position', geoposition.fields.GeopositionField(blank=True, max_length=42, null=True)),
                ('province', models.CharField(blank=True, default='', max_length=100, verbose_name='Province')),
                ('municipality', models.CharField(blank=True, default='', max_length=100, verbose_name='Municipality')),
                ('district', models.CharField(blank=True, default='', max_length=200, verbose_name='District')),
                ('neighborhood', models.CharField(blank=True, default='', max_length=200, verbose_name='Neighborhood')),
                ('address', models.CharField(blank=True, default='', max_length=200, verbose_name='Address')),
                ('postcode', models.CharField(blank=True, default='', max_length=128, verbose_name='Postcode')),
                ('width', models.IntegerField(default=0, verbose_name='Width')),
                ('height', models.IntegerField(default=0, verbose_name='Height')),
                ('size', models.IntegerField(default=0, verbose_name='Size (bytes)')),
                ('exif_date', models.DateTimeField(blank=True, null=True, verbose_name='Exif date')),
                ('camera_model', models.CharField(blank=True, default='', max_length=50, verbose_name='Camera model')),
                ('orientation', models.IntegerField(blank=True, null=True, verbose_name='Orientation')),
                ('longitude', models.FloatField(default=0, verbose_name='Exif longitude')),
                ('latitude', models.FloatField(default=0, verbose_name='Exif latitude')),
                ('altitude', models.FloatField(default=0, verbose_name='Exif altitude')),
                ('flickr_id', models.CharField(blank=True, default='', max_length=50, verbose_name='Flickr id')),
                ('flickr_username', models.CharField(blank=True, default='', max_length=50, verbose_name='Flickr username')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modification date')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Delete date')),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos_album', to='bima_core.Album', verbose_name='Album')),
            ],
            options={
                'verbose_name_plural': 'Photos',
                'verbose_name': 'Photo',
                'ordering': ('-modified_at', 'owner'),
            },
            bases=(permissions.PhotoPermissionMixin, SoftDeleteModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PhotoAuthor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modification date')),
                ('slug', models.SlugField(blank=True, default='', max_length=100)),
                ('first_name', models.CharField(max_length=50, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, default='', max_length=50, verbose_name='last name')),
            ],
            options={
                'verbose_name_plural': 'Authors',
                'verbose_name': 'Author',
            },
            bases=(permissions.RightPermissionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PhotoChunked',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(max_length=255, upload_to=drf_chunked_upload.models.generate_filename)),
                ('filename', models.CharField(max_length=255)),
                ('offset', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Uploading'), (2, 'Complete'), (3, 'Failed')], default=1)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='photochunked', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Photo chunks',
                'verbose_name': 'Photo chunk',
                'ordering': ('-completed_at', '-status', '-created_at'),
            },
            bases=(permissions.PhotoChunkPermissionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PhotoExif',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('width', models.IntegerField(default=0, verbose_name='Width')),
                ('height', models.IntegerField(default=0, verbose_name='Height')),
                ('exif_date', models.DateTimeField(blank=True, null=True, verbose_name='Original date')),
                ('camera_model', models.CharField(blank=True, default='', max_length=50, verbose_name='Camera model')),
                ('orientation', models.IntegerField(blank=True, null=True, verbose_name='Orientation')),
                ('longitude', models.FloatField(default=0, verbose_name='Exif longitude')),
                ('latitude', models.FloatField(default=0, verbose_name='Exif latitude')),
                ('altitude', models.FloatField(default=0, verbose_name='Exif altitude')),
                ('size', models.IntegerField(default=0, verbose_name='Exif size (bytes)')),
            ],
        ),
        migrations.CreateModel(
            name='TaggedKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('language', LanguageField(choices=[('en', 'English'), ('es', 'Español'), ('ca', 'Catalan')], default='en', max_length=3)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bima_core_taggedkeyword_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bima_core_taggedkeyword_tags', to='taggit.Tag')),
            ],
            bases=(models.Model, permissions.ReadPermissionMixin),
        ),
        migrations.CreateModel(
            name='TaggedName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bima_core_taggedname_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bima_core_taggedname_tags', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, permissions.ReadPermissionMixin),
        ),
        migrations.CreateModel(
            name='UsageRight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modification date')),
                ('slug', models.SlugField(blank=True, default='', max_length=100)),
                ('title', models.CharField(max_length=128, verbose_name='Title')),
                ('title_en', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('title_es', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('title_ca', models.CharField(max_length=128, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, default='', verbose_name='Description')),
                ('description_en', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('description_es', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
                ('description_ca', models.TextField(blank=True, default='', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name_plural': 'Usage rights',
                'verbose_name': 'Usage right',
            },
            bases=(permissions.RightPermissionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=(permissions.GroupPermissionMixin, 'auth.group'),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.AddField(
            model_name='photo',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='author_photos', to='bima_core.PhotoAuthor', verbose_name='Author'),
        ),
        migrations.AddField(
            model_name='photo',
            name='categories',
            field=models.ManyToManyField(blank=True, related_name='taxonomy_photos', to='bima_core.DAMTaxonomy'),
        ),
        migrations.AddField(
            model_name='photo',
            name='copyright',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='copyright_photos', to='bima_core.Copyright', verbose_name='Copyright'),
        ),
        migrations.AddField(
            model_name='photo',
            name='exif',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='bima_core.PhotoExif', verbose_name='EXIF'),
        ),
        migrations.AddField(
            model_name='photo',
            name='external_usage_restriction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='external_usage_restriction_photos', to='bima_core.UsageRight', verbose_name='External usage restriction'),
        ),
        migrations.AddField(
            model_name='photo',
            name='internal_usage_restriction',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='internal_usage_restriction_photos', to='bima_core.UsageRight', verbose_name='Internal usage restriction'),
        ),
        migrations.AddField(
            model_name='photo',
            name='keywords',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='bima_core.TaggedKeyword', to='taggit.Tag', verbose_name='Keywords'),
        ),
        migrations.AddField(
            model_name='photo',
            name='names',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='bima_core.TaggedName', to='taggit.Tag', verbose_name='Names'),
        ),
        migrations.AddField(
            model_name='photo',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to=settings.AUTH_USER_MODEL, verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='gallerymembership',
            name='photo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photo_galleries', to='bima_core.Photo'),
        ),
        migrations.AddField(
            model_name='gallery',
            name='cover',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='covers_gallery', to='bima_core.Photo', verbose_name='Cover'),
        ),
        migrations.AddField(
            model_name='gallery',
            name='owners',
            field=models.ManyToManyField(related_name='user_galleries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='gallery',
            name='photos',
            field=models.ManyToManyField(related_name='galleries', through='bima_core.GalleryMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='album',
            name='cover',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='covers_album', to='bima_core.Photo', verbose_name='Cover'),
        ),
        migrations.AddField(
            model_name='album',
            name='owners',
            field=models.ManyToManyField(related_name='albums', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accesslog',
            name='photo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bima_core.Photo', verbose_name='Photo'),
        ),
        migrations.AddField(
            model_name='accesslog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='taggedkeyword',
            unique_together=set([('object_id', 'tag', 'language')]),
        ),
    ]
